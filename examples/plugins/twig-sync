#!/bin/bash
set -euo pipefail

# Plugin metadata
PLUGIN_NAME="twig-sync"
PLUGIN_VERSION="1.0.0"

# Parse common options
VERBOSE=0
COLOR="auto"

show_help() {
    cat << EOF
$PLUGIN_NAME $PLUGIN_VERSION
Sync repositories using twig context

USAGE:
    twig sync [OPTIONS] <COMMAND>

OPTIONS:
    -h, --help       Print help information
    -V, --version    Print version information
    -v, --verbose    Increase verbosity
    --color <WHEN>   Control colored output [auto, always, never]

COMMANDS:
    all     Sync all tracked repositories
    current Sync current repository only
    status  Show sync status
EOF
}

show_version() {
    echo "$PLUGIN_NAME $PLUGIN_VERSION"
}

print_success() {
    echo "✓ $1"
}

print_error() {
    echo "✗ $1" >&2
}

print_info() {
    echo "ℹ $1"
}

print_verbose() {
    if [ "$VERBOSE" -gt 0 ]; then
        print_info "$1"
    fi
}

# Access twig configuration
TWIG_CONFIG_DIR="${TWIG_CONFIG_DIR:-}"
TWIG_DATA_DIR="${TWIG_DATA_DIR:-}"
TWIG_CURRENT_REPO="${TWIG_CURRENT_REPO:-}"
TWIG_CURRENT_BRANCH="${TWIG_CURRENT_BRANCH:-}"
TWIG_VERSION="${TWIG_VERSION:-unknown}"

# Plugin directories
PLUGIN_CONFIG_DIR="$TWIG_CONFIG_DIR/plugins/sync"
PLUGIN_DATA_DIR="$TWIG_DATA_DIR/plugins/sync"

# Create plugin directories
mkdir -p "$PLUGIN_CONFIG_DIR"
mkdir -p "$PLUGIN_DATA_DIR"

sync_repository() {
    local repo_path="$1"
    print_verbose "Syncing repository: $repo_path"

    if [ ! -d "$repo_path" ]; then
        print_error "Repository not found: $repo_path"
        return 1
    fi

    cd "$repo_path"

    # Check if it's a git repository
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        print_error "Not a git repository: $repo_path"
        return 1
    fi

    # Simulate sync operations
    print_verbose "Fetching from remote..."
    # git fetch --all --prune
    sleep 0.3

    print_verbose "Checking for updates..."
    # git status --porcelain
    sleep 0.2

    print_success "Repository synced: $(basename "$repo_path")"
}

sync_all_repositories() {
    print_info "Syncing all tracked repositories..."

    # Read registry from twig data directory
    local registry_file="$TWIG_DATA_DIR/registry.json"

    if [ ! -f "$registry_file" ]; then
        print_error "No repositories found in registry. Use 'twig git add' to track repositories."
        return 1
    fi

    # Simulate reading registry and syncing repositories
    local repos=("repo1" "repo2" "repo3")

    for repo in "${repos[@]}"; do
        print_verbose "Processing repository: $repo"
        # In a real implementation, you would parse the JSON and sync each repo
        sleep 0.1
    done

    print_success "All repositories synced successfully!"
}

sync_current_repository() {
    if [ -z "$TWIG_CURRENT_REPO" ]; then
        print_error "Not in a git repository. Please run this command from within a git repository."
        return 1
    fi

    print_info "Syncing current repository..."
    sync_repository "$TWIG_CURRENT_REPO"
}

show_sync_status() {
    print_info "Checking sync status..."

    if [ -n "$TWIG_CURRENT_REPO" ]; then
        print_info "Current repository: $TWIG_CURRENT_REPO"
        if [ -n "$TWIG_CURRENT_BRANCH" ]; then
            print_info "Current branch: $TWIG_CURRENT_BRANCH"
        fi
    fi

    # Simulate status check
    sleep 0.2
    print_success "All repositories are up to date!"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -V|--version)
            show_version
            exit 0
            ;;
        -v|--verbose)
            VERBOSE=$((VERBOSE + 1))
            shift
            ;;
        --color)
            COLOR="$2"
            shift 2
            ;;
        all)
            COMMAND="all"
            shift
            ;;
        current)
            COMMAND="current"
            shift
            ;;
        status)
            COMMAND="status"
            shift
            ;;
        *)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Show twig context if verbose
if [ "$VERBOSE" -gt 0 ]; then
    print_info "Twig version: $TWIG_VERSION"
    print_info "Plugin config dir: $PLUGIN_CONFIG_DIR"
    print_info "Plugin data dir: $PLUGIN_DATA_DIR"
fi

# Execute command
case "${COMMAND:-}" in
    all)
        sync_all_repositories
        ;;
    current)
        sync_current_repository
        ;;
    status)
        show_sync_status
        ;;
    *)
        print_error "No command specified"
        show_help
        exit 1
        ;;
esac
