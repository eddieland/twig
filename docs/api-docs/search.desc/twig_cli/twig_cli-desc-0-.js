searchState.loadedDescShard("twig_cli", 0, "Twig CLI Library\nAuto Dependency Discovery\nCommand Line Interface\nClient Creation\nShell Completion\nConstants for the Twig CLI\nCredential Management\nSystem Diagnostics\nFixup Command Implementation\nGit Operations\nPlugin Discovery and Execution\nUser-Defined Dependency Resolver\nUtility Functions\nAnalyze commit ancestry to determine branch relationships\nDiscover Git-based dependencies using commit ancestry\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet root branches from auto-discovery\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSuggest dependencies based on Git history analysis\nBranch dependency and root management\nPerform a cascading rebase from the current branch to its …\nTop-level CLI command for the twig tool\nSubcommands for the twig tool\nCreate a commit using Jira issue information\nGenerate shell completions\nCredential management\nShow a comprehensive dashboard of local branches, PRs, and …\nRun system diagnostics\nCreate fixup commits interactively\nGit repository management\nGitHub integration\nInitialize twig configuration\nJira integration\nIntentionally panic (for testing error handling)\nRebase the current branch on its parent(s)\nSwitch to branches by Jira issue, GitHub PR, or branch name\nAutomatically link branches to Jira issues and GitHub PRs\nShow your branch tree with user-defined dependencies\nWorktree management\nBranch Command\nCascade Command\nControls when colored output is used\nSubcommands\nCommit Command\nCompletion Command\nConfig Init command\nCredentials Command\nDashboard Command\nFixup Command\nReturns the argument unchanged.\nReturns the argument unchanged.\nGit Command\nGitHub Command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJira Command\nPlugin name and arguments (when no subcommand matches)\nRebase Command\nSwitch Command\nSync Command\nTree Command\nSets the level of verbosity (can be used multiple times)\nWorktree Command\nAdd a root branch\nCommand for branch dependency and root management\nSubcommands for the branch command\nAdd a dependency between branches\nAdd a dependency between branches\nList all root branches\nRemove a root branch\nRemove a dependency between branches\nRemove a dependency between branches\nRoot branch management\nAdd a root branch\nRoot branch management\nList all root branches\nRemove a root branch\nSubcommands for the root command\nThe branch name to add as root\nThe branch name to remove from roots\nThe child branch name\nThe child branch name\nSet this as the default root branch\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the branch command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe parent branch name\nThe parent branch name\nPath to a specific repository\nPath to a specific repository\nPath to a specific repository\nPath to a specific repository\nPath to a specific repository\nThe subcommand to execute\nThe subcommand to execute\nCommand for performing a cascading rebase\nEnum representing rebase conflict resolution options\nEnum representing rebase result\nAutomatically stash and pop pending changes\nDetermine the order in which branches should be rebased\nExecute a git command and handle output\nForce rebase even if branches are up-to-date\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all descendants of a branch up to a certain depth\nHandle the cascade command\nHandle rebase conflicts\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum depth for cascading rebase\nRebase a branch onto another branch\nForce rebase a branch onto another branch (used with –…\nPerform cascading rebase from current branch to children\nPath to a specific repository\nShow the dependency tree\nShow dependency graph before rebasing\nArguments for the commit command\nCheck if a commit with the same message exists in recent …\nCreate a fixup commit with the given message\nCreate a normal commit with the given message\nReturns the argument unchanged.\nGenerate a commit message using Jira issue information\nHandle the commit command\nCalls <code>U::from(self)</code>.\nCustom message to use instead of the Jira issue summary\nDisable checking for duplicate commits to fixup\nText to add before the issue summary (after Jira key)\nPrompt the user to confirm creating a fixup commit\nText to add at the end of the message\nCommand for generating shell completions\nReturns the argument unchanged.\nHandle the completion command\nCalls <code>U::from(self)</code>.\nShell to generate completions for\nInitialize the configuration directories\nCheck if credentials are properly configured\nCommand for credential management\nSubcommands for the creds command\nSet up credentials interactively\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the check command\nHandle the creds command\nHandle the setup command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe subcommand to execute\nCommand for showing a comprehensive dashboard\nDisplay the dashboard in text format\nOutput format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the dashboard command\nInclude remote branches in the dashboard\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShow only items assigned to or created by the current user\nDisable GitHub PR information (avoids GitHub API requests)\nDisable Jira issue information (avoids Jira API requests)\nShow only recent items (last 7 days)\nPath to a specific repository (defaults to current …\nSimple view (equivalent to –no-github –no-jira)\nArguments for the fixup command\nInclude commits from all authors, not just current user\nOnly consider commits from the last N days\nShow what would be done without creating the fixup commit\nReturns the argument unchanged.\nHandle the fixup command\nCalls <code>U::from(self)</code>.\nNumber of recent commits to consider\nAdd a repository to the registry\nAdd a repository to the registry\nExecute a git command in repositories\nExecute a git command in repositories\nFetch updates for repositories\nFetch updates for repositories\nCommand for Git repository management\nSubcommands for the git command\nList all repositories in the registry\nRemove a repository from the registry\nRemove a repository from the registry\nList stale branches in repositories\nList stale branches in repositories\nFetch all repositories in the registry\nExecute in all repositories in the registry\nCommand to execute\nNumber of days to consider a branch stale\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the git command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPath to the repository (defaults to current directory)\nPath to the repository (defaults to current directory)\nInteractive prune mode - prompt to delete each stale branch\nPath to a specific repository (defaults to current …\nPath to a specific repository (defaults to current …\nPath to a specific repository (defaults to current …\nThe subcommand to execute\nCheck GitHub authentication\nView CI/CD checks for a PR\nView CI/CD checks for a PR\nCommand for GitHub integration\nSubcommands for the GitHub command\nLink a PR to the current branch\nLink a PR to the current branch\nList pull requests for a repository\nList pull requests for a repository\nOpen GitHub PR in browser\nOpen GitHub PR in browser\nPull request operations\nPull request operations\nSubcommands for the PR command\nShow PR status for current branch\nDisplay PR status information\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the check command\nHandle the checks command\nHandle the GitHub command\nHandle the GitHub open command\nHandle the PR link command\nHandle the PR list command\nHandle the PR status command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of PRs to display\nPR number (defaults to current branch’s PR)\nPR number (defaults to current branch’s PR)\nPath to a specific repository (defaults to current …\nPath to a specific repository (defaults to current …\nPath to a specific repository (defaults to current …\nFilter by PR state (open, closed, all)\nThe subcommand to execute\nThe subcommand to execute\nCreate a branch from a Jira issue\nCommand for Jira integration\nSubcommands for the Jira command\nLink a branch to a Jira issue\nOpen Jira issue in browser\nTransition a Jira issue\nView a Jira issue\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the create branch command\nHandle the Jira command\nHandle the Jira open command\nHandle the link branch command\nHandle the transition issue command\nHandle the view issue command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe subcommand to execute\nThe branch name (if not provided, the current branch will …\nThe Jira issue key (e.g., PROJ-123)\nThe Jira issue key (e.g., PROJ-123)\nCreate a worktree for the branch\nEnum representing rebase conflict resolution options\nCommand for rebasing the current branch on its parent(s)\nEnum representing rebase result\nAutomatically stash and pop pending changes\nExecute a git command and handle output\nForce rebase even if branches are up-to-date\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the rebase command\nHandle rebase conflicts\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRebase a branch onto another branch\nForce rebase a branch onto another branch (used with –…\nRebase current branch on its parent(s)\nPath to a specific repository\nShow the dependency tree\nShow dependency graph before rebasing\nInput type detection\nCommand for intelligently switching to branches based on …\nAdd a branch dependency\nCreate a new branch and switch to it\nCreate a branch from a GitHub PR\nCreate a branch from a Jira issue\nDetect the type of input provided\nExtract Jira issue key from Jira URL\nExtract PR number from GitHub URL\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle switching to a branch by name\nHandle switching to a branch based on GitHub PR\nHandle switching to a branch based on Jira issue\nHandle switching to the root branch\nHandle the switch command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if input matches Jira issue key pattern\nResolve parent branch based on the provided option\nStore GitHub PR association in repository state\nStore Jira issue association in repository state\nSwitch to an existing branch\nCommand for automatically linking branches to Jira issues …\nApply sync changes to repository state\nDetect GitHub PR number from branch using GitHub API\nDetect Jira issue key from branch name\nShow what would be synced without making changes\nUpdate existing associations that differ from detected …\nReturns the argument unchanged.\nHandle the sync command\nCalls <code>U::from(self)</code>.\nSkip detection and linking of GitHub PRs\nSkip detection and linking of Jira issues\nPrint summary of sync findings\nPath to a specific repository\nSync branches with their detected issues and PRs\nCommand for displaying branch dependency trees\nReturns the argument unchanged.\nHandle the tree command\nCalls <code>U::from(self)</code>.\nMaximum depth to display in the tree\nDisable colored output\nPath to a specific repository\nClean up stale worktrees\nClean up stale worktrees\nCreate a new worktree for a branch\nCreate a new worktree for a branch\nList all worktrees for a repository\nList all worktrees for a repository\nCommand for worktree management\nSubcommands for the worktree command\nBranch name\nClean up stale worktrees\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all worktrees for a repository\nPath to a specific repository\nPath to a specific repository\nPath to a specific repository\nThe subcommand to execute\nRepresents a GitHub API client\nRepresents a Jira API client\nAdd a comment to a Jira issue\nCreate a GitHub client from credentials\nCreates an authenticated GitHub client using credentials …\nCreates a tokio runtime and an authenticated GitHub client\nCreate a Jira client from credentials\nCreates an authenticated Jira client using credentials …\nCreates a tokio runtime and an authenticated Jira client\nEnsure a host URL has a scheme, defaulting to https:// if …\nExtract PR number from a GitHub PR URL\nExtract owner and repo from a GitHub URL\nFind pull requests by head branch name\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet check runs for a pull request\nGet the current authenticated user\nGet a Jira issue by key\nGet the $JIRA_HOST environment variable value If the host …\nGet comprehensive PR status including the PR details, …\nGet a specific pull request by number\nGet pull request reviews\nGet available transitions for an issue\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList Jira issues with filtering options\nList pull requests for a repository with pagination support\nCreate a new Jira client\nCreate a new GitHub client\nRemove trailing slash if it’s just the root path\nTry to parse with https:// prefix\nTest the Jira connection by fetching the current user\nTest the GitHub connection by fetching the current user\nTransition an issue to a new status\nBourne Again <code>SHell</code> (bash)\nFriendly Interactive <code>SHell</code> (fish)\n<code>PowerShell</code>\nShell with auto-generated completion script available.\nZ <code>SHell</code> (zsh)\nReturns the argument unchanged.\nGenerate shell completions for the specified shell\nCalls <code>U::from(self)</code>.\nEnvironment variable for the JIRA host URL\nPlatform-specific Git executable name\nRepresents credentials for a service\nCheck if GitHub credentials are available\nCheck if Jira credentials are available\nReturns the argument unchanged.\nGet GitHub credentials\nCalls <code>U::from(self)</code>.\nPlatform-specific credential handling implementations\nGet the path to the .netrc file\nNormalizes a Jira host URL by removing protocol prefixes …\nParse a .netrc file for credentials for a specific machine\nWrite or update a .netrc entry for a specific machine\nTrait for platform-specific credential storage operations\nTrait for platform-specific file permission operations\nUnix implementation of credential provider using .netrc …\nUnix implementation of file permissions using chmod-style …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the appropriate credential provider for the current …\nGet credentials for a service\nCheck if a file has secure permissions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet secure permissions on a credential file\nStore credentials for a service\\\nUnix-specific credential handling implementation\nUnix implementation of credential provider using .netrc …\nUnix implementation of file permissions using chmod-style …\nCheck configuration directories\nCheck credentials\nCheck dependencies\nCheck git configuration\nCheck network connectivity to key services\nCheck system information\nCheck tracked repositories\nRun comprehensive system diagnostics\nCommit Collection and Filtering\nFixup Commit Creation\nCommit Scorer\nInteractive Commit Selection\nRepresents a commit candidate for fixup\nCollects commit candidates from the current Git branch.\nExtract Jira issue key from commit message\nReturns the argument unchanged.\nGet the current git user name\nCalls <code>U::from(self)</code>.\nCreate a fixup commit for the selected target commit\nChecks if there are staged changes in the Git repository.\nScores and sorts commit candidates based on relevance …\nCancel the selection\nBasic commit selector using ratatui\nContinue with the selection process\nInput mode for the selector\nUser is navigating the commit list\nUser is typing in the search input\nSelect the given commit\nActions that can result from key input\nNavigation state for the commit selector\nGet all filtered candidates\nClear the search query and show all candidates\nFilter candidates based on the current search query using …\nFormats a commit candidate for display in the fuzzy finder.\nFormat a relative time string\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle key input and return the action to take\nHandle key input in navigation mode\nHandle key input in search mode\nGet the current input mode\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if there are no filtered candidates\nGet the number of filtered candidates\nCreate a new commit selector with the given candidates\nCreate a new selector state with the given candidates\nMove to the next item\nRemove the last character from the search query\nMove to the previous item\nAdd a character to the search query\nRender the results list\nRender the search input field\nRun the interactive selector and return the selected commit\nMain application loop\nGet the current search query\nSelect a commit interactively using ratatui\nGet the currently selected candidate, if any\nGet the currently selected index\nSet the input mode\nSet the selected index (bounds-checked)\nGet a reference to the internal state (for testing)\nGet the total number of all candidates (before filtering)\nRender the UI\nUpdate the search query and filter candidates\nInformation about a commit\nSummary of pruning operation\nInformation about a stale branch for pruning\nAdd a repository to the registry\nDelete a git branch\nDisplay branch information for pruning decision\nDisplay prune summary\nDisplay stale branches (non-prune mode)\nEnhance branch info with novel commits and external …\nExecute a command in all repositories\nExecute a command in a repository\nFetch updates for all repositories in the registry\nFetch updates for a repository\nFind commits in branch that are not in parent (novel …\nFind stale branches in a repository\nFind stale branches and return structured data\nCalculate relative time from a timestamp string\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInteractive pruning workflow\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all repositories in the registry\nPrompt user for deletion confirmation\nRemove a repository from the registry\nExecute a plugin with the given name and arguments\nCalculate Levenshtein distance between two strings\nList available plugins in PATH\nCheck if a plugin exists in PATH\nGenerate suggestions for unknown commands\nPure user-defined dependency resolver for tree command\nBuild parent-child relationships from user-defined …\nBuild tree structure from user-defined dependencies and …\nReturns the argument unchanged.\nGet the default root branch or suggest one\nCalls <code>U::from(self)</code>.\nResolve user-defined dependencies and build branch nodes\nValidate user dependency integrity (detect cycles, missing …\nResolve a repository path from a command line argument or …")