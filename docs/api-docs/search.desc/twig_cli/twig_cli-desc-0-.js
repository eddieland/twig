searchState.loadedDescShard("twig_cli", 0, "Twig CLI Library\nAuto Dependency Discovery\nCommand Line Interface\nShell Completion\nConfiguration Management\nConstants for the Twig CLI\nCredential Management\nSystem Diagnostics\nGit Operations\nRepository State Management\nApplication State Management\nBranch Tree Renderer\nUser-Defined Dependency Resolver\nUtility Functions\nAnalyze commit ancestry to determine branch relationships\nDiscover Git-based dependencies using commit ancestry\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet root branches from auto-discovery\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSuggest dependencies based on Git history analysis\nBranch dependency and root management\nPerform a cascading rebase from the current branch to its …\nTop-level CLI command for the twig tool\nSubcommands for the twig tool\nGenerate shell completions\nCredential management\nShow a comprehensive dashboard of local branches, PRs, and …\nRun system diagnostics\nGit repository management\nGitHub integration\nInitialize twig configuration\nJira integration\nIntentionally panic (for testing error handling)\nRebase the current branch on its parent(s)\nMagic branch switching\nAutomatically link branches to Jira issues and GitHub PRs\nShow your branch tree with user-defined dependencies\nWorktree management\nBranch Command\nCascade Command\nControls when colored output is used\nSubcommands\nCompletion Command\nCredentials Command\nDashboard Command\nReturns the argument unchanged.\nReturns the argument unchanged.\nGit Command\nGitHub Command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJira Command\nRebase Command\nSwitch Command\nSync Command\nTree Command\nSets the level of verbosity (can be used multiple times)\nWorktree Command\nAdd a root branch\nCommand for branch dependency and root management\nSubcommands for the branch command\nAdd a dependency between branches\nAdd a dependency between branches\nList all root branches\nRemove a root branch\nRemove a dependency between branches\nRemove a dependency between branches\nRoot branch management\nAdd a root branch\nRoot branch management\nList all root branches\nRemove a root branch\nSubcommands for the root command\nThe branch name to add as root\nThe branch name to remove from roots\nThe child branch name\nThe child branch name\nSet this as the default root branch\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the branch command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe parent branch name\nThe parent branch name\nPath to a specific repository\nPath to a specific repository\nPath to a specific repository\nPath to a specific repository\nPath to a specific repository\nThe subcommand to execute\nThe subcommand to execute\nCommand for performing a cascading rebase\nEnum representing rebase conflict resolution options\nEnum representing rebase result\nAutomatically stash and pop pending changes\nDetermine the order in which branches should be rebased\nExecute a git command and handle output\nForce rebase even if branches are up-to-date\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all descendants of a branch up to a certain depth\nHandle the cascade command\nHandle rebase conflicts\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum depth for cascading rebase\nRebase a branch onto another branch\nForce rebase a branch onto another branch (used with –…\nPerform cascading rebase from current branch to children\nPath to a specific repository\nShow the dependency tree\nShow dependency graph before rebasing\nCommand for generating shell completions\nReturns the argument unchanged.\nHandle the completion command\nCalls <code>U::from(self)</code>.\nShell to generate completions for\nCheck if credentials are properly configured\nCommand for credential management\nSubcommands for the creds command\nSet up credentials interactively\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the check command\nHandle the creds command\nHandle the setup command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe subcommand to execute\nCommand for showing a comprehensive dashboard\nDisplay the dashboard in text format\nOutput format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the dashboard command\nInclude remote branches in the dashboard\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShow only items assigned to or created by the current user\nDisable GitHub PR information (avoids GitHub API requests)\nDisable Jira issue information (avoids Jira API requests)\nShow only recent items (last 7 days)\nPath to a specific repository (defaults to current …\nSimple view (equivalent to –no-github –no-jira)\nAdd a repository to the registry\nAdd a repository to the registry\nExecute a git command in repositories\nExecute a git command in repositories\nFetch updates for repositories\nFetch updates for repositories\nCommand for Git repository management\nSubcommands for the git command\nList all repositories in the registry\nRemove a repository from the registry\nRemove a repository from the registry\nList stale branches in repositories\nList stale branches in repositories\nFetch all repositories in the registry\nExecute in all repositories in the registry\nCheck all repositories in the registry\nCommand to execute\nNumber of days to consider a branch stale\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the git command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPath to the repository\nPath to the repository\nPath to a specific repository\nPath to a specific repository\nPath to a specific repository\nThe subcommand to execute\nCheck GitHub authentication\nView CI/CD checks for a PR\nView CI/CD checks for a PR\nCommand for GitHub integration\nSubcommands for the GitHub command\nLink a PR to the current branch\nLink a PR to the current branch\nList pull requests for a repository\nList pull requests for a repository\nPull request operations\nPull request operations\nSubcommands for the PR command\nShow PR status for current branch\nDisplay PR status information\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the check command\nHandle the checks command\nHandle the GitHub command\nHandle the PR link command\nHandle the PR list command\nHandle the PR status command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of PRs to display\nPR number (defaults to current branch’s PR)\nURL or ID of the pull request to link (e.g., ‘…\nPath to a specific repository (defaults to current …\nPath to a specific repository (defaults to current …\nFilter by PR state (open, closed, all)\nThe subcommand to execute\nThe subcommand to execute\nCreate a branch from a Jira issue\nCommand for Jira integration\nSubcommands for the Jira command\nLink a branch to a Jira issue\nTransition a Jira issue\nView a Jira issue\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the create branch command\nHandle the Jira command\nHandle the link branch command\nHandle the transition issue command\nHandle the view issue command\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe subcommand to execute\nThe branch name (if not provided, the current branch will …\nThe Jira issue key (e.g., PROJ-123)\nThe Jira issue key (e.g., PROJ-123) If not provided, uses …\nThe Jira issue key (e.g., PROJ-123) If not provided, uses …\nThe Jira issue key (e.g., PROJ-123) If not provided, uses …\nThe transition name or ID (if not provided, available …\nCreate a worktree for the branch\nEnum representing rebase conflict resolution options\nCommand for rebasing the current branch on its parent(s)\nEnum representing rebase result\nAutomatically stash and pop pending changes\nExecute a git command and handle output\nForce rebase even if branches are up-to-date\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle the rebase command\nHandle rebase conflicts\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRebase a branch onto another branch\nForce rebase a branch onto another branch (used with –…\nRebase current branch on its parent(s)\nPath to a specific repository\nShow the dependency tree\nShow dependency graph before rebasing\nInput type detection\nCommand for intelligently switching to branches based on …\nAdd a branch dependency\nCreate a new branch and switch to it\nCreate a branch from a GitHub PR\nCreate a branch from a Jira issue\nDetect the type of input provided\nExtract Jira issue key from Jira URL\nExtract PR number from GitHub URL\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle switching to a branch by name\nHandle switching to a branch based on GitHub PR\nHandle switching to a branch based on Jira issue\nHandle the switch command\nJira issue, GitHub PR, or branch name\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if input matches Jira issue key pattern\nDon’t create branch if it doesn’t exist\nSet parent dependency for the new branch\nResolve parent branch based on the provided option\nStore GitHub PR association in repository state\nStore Jira issue association in repository state\nSwitch to an existing branch\nCommand for automatically linking branches to Jira issues …\nApply sync changes to repository state\nDetect GitHub PR number from branch using GitHub API\nDetect Jira issue key from branch name\nShow what would be synced without making changes\nUpdate existing associations that differ from detected …\nReturns the argument unchanged.\nHandle the sync command\nCalls <code>U::from(self)</code>.\nSkip detection and linking of GitHub PRs\nSkip detection and linking of Jira issues\nPrint summary of sync findings\nPath to a specific repository\nSync branches with their detected issues and PRs\nCommand for displaying branch dependency trees\nReturns the argument unchanged.\nHandle the tree command\nCalls <code>U::from(self)</code>.\nMaximum depth to display in the tree\nDisable colored output\nPath to a specific repository\nClean up stale worktrees\nClean up stale worktrees\nCreate a new worktree for a branch\nCreate a new worktree for a branch\nList all worktrees for a repository\nList all worktrees for a repository\nCommand for worktree management\nSubcommands for the worktree command\nBranch name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPath to a specific repository\nPath to a specific repository\nPath to a specific repository\nThe subcommand to execute\nGenerate shell completions for the specified shell\nParse a shell string into a Shell enum\nRepresents the configuration directories for the twig …\nGet the cache directory\nGet the config directory\nGet the data directory\nReturns the argument unchanged.\nGet the configuration directories\nInitialize the configuration directories\nInitialize the configuration directories\nCalls <code>U::from(self)</code>.\nCreate a new ConfigDirs instance\nGet the path to the registry file\nGet the path to the repository-local state directory\nGet the path to the repository-local state file\nDefault JIRA host URL if $JIRA_HOST is undefined\nEnvironment variable for the JIRA host URL\nRepresents credentials for a service\nCheck if GitHub credentials are available\nCheck if Jira credentials are available\nReturns the argument unchanged.\nGet GitHub credentials\nGet Jira credentials\nGet the path to the .netrc file\nCalls <code>U::from(self)</code>.\nParse a .netrc file for credentials for a specific machine\nParse the .netrc file for credentials for a specific …\nWrite or update a .netrc entry for a specific machine\nCheck configuration directories\nCheck credentials\nCheck dependencies\nCheck git configuration\nCheck network connectivity to key services\nCheck system information\nCheck tracked repositories\nRun comprehensive system diagnostics\nAdd a repository to the registry\nDetect the current working directory repository\nDetect the current working directory repository\nExecute a command in all repositories\nExecute a command in a repository\nFetch updates for all repositories in the registry\nFetch updates for a repository\nFind stale branches in a repository\nFind stale branches in all repositories\nList all repositories in the registry\nRemove a repository from the registry\nRepresents a user-defined branch dependency\nRepresents a branch-issue association\nRepresents the repository-local state\nRepresents a user-defined root branch\nRepresents a worktree in a repository\nAdd a branch-issue association\nAdd a user-defined branch dependency\nAdd a root branch\nAdd a worktree to the state\nClean up stale worktrees\nCreate a new worktree\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a branch-issue association by branch name\nGet a branch-issue association by Jira issue key\nGet the default root branch\nGet all children of a branch (branches that depend on this …\nGet all parents of a branch (branches this branch depends …\nGet all root branch names\nGet a worktree by name\nCheck if there’s a dependency path from start to end\nCheck if there are any user-defined dependencies\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a branch is marked as a root\nList all branch-issue associations\nList all dependencies\nList all root branches\nList all worktrees for a repository\nList all worktrees\nLoad the repository state from disk\nRebuild all indices for fast lookups\nRemove all dependencies for a branch (both as child and …\nRemove a user-defined branch dependency\nRemove a root branch\nRemove a worktree from the state\nSave the repository state to disk\nSet a root branch as the default\nCheck if adding a dependency would create a cycle\nRepresents the registry of tracked repositories\nRepresents a repository in the registry\nAdd a repository to the registry\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all repositories in the registry\nLoad the registry from disk\nCreate a new Repository instance\nRemove a repository from the registry\nSave the registry to disk\nUpdate the last fetch time for a repository\nRepresents a branch node in the tree\nRenderer for the branch tree\nBuild cross-references for branches that appear in …\nCalculate the width of a branch and its children\nCalculate the maximum width of the tree structure …\nGet display width of a string, accounting for ANSI color …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize the renderer with proper tree width calculation\nPrint a branch with its metadata\nHelper method to render trees from root branches\nRender the tree starting from a given branch\nPure user-defined dependency resolver for tree command\nBuild parent-child relationships from user-defined …\nBuild tree structure from user-defined dependencies and …\nReturns the argument unchanged.\nGet the default root branch or suggest one\nCalls <code>U::from(self)</code>.\nResolve user-defined dependencies and build branch nodes\nValidate user dependency integrity (detect cycles, missing …\nRepresents an associated item for a branch\nAssociated GitHub PR number\nAssociated Jira issue key\nNo associated item found\nReturns the argument unchanged.\nGet the associated Jira issue or GitHub PR for the current …\nGet the associated GitHub PR number for the current branch\nGet the associated Jira issue key for the current branch\nCalls <code>U::from(self)</code>.\nOutput Formatting\nResolve a repository path from a command line argument or …\nEnable colored output (alias for Yes)\nAutomatically detect if colors should be used based on …\nEnum representing different color modes for output\nDisable colored output (alias for No)\nDisable colored output\nEnable colored output\nFormat a GitHub check run status\nFormat a command or command example\nFormat a GitHub PR review status\nFormat a repository name\nFormat a repository path\nFormat a timestamp\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrint an error message\nPrint a section header\nPrint an info message\nPrint a success message\nPrint a warning message")