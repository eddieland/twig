searchState.loadedDescShard("twig_core", 0, "Twig Core Library\nConfiguration Management\nGit Utilities\nOutput Formatting\nPlugin-specific utilities\nApplication State Management\nBranch Tree Renderer\nUtility Functions\nRepresents the configuration directories for the twig …\nGet the cache directory\nGet the config directory\nGet the data directory\nReturns the argument unchanged.\nGet the configuration directories\nInitialize the configuration directories\nCalls <code>U::from(self)</code>.\nCreate a new ConfigDirs instance\nGet the path to the registry file\nGet the path to the repository-local state directory\nGet the path to the repository-local state file\nCheck if a branch exists in the repository\nGet the current branch name if we’re in a Git repository\nDetect if the current directory or any parent directory is …\nDetect if the given path or any parent directory is a Git …\nGet all local branches in the repository\nGet the Git repository object for the current directory\nGet the Git repository object for a specific path\nGet the remote tracking branch for a local branch\nCheck if we’re currently in a git repository\nEnable colored output (alias for Yes)\nAutomatically detect if colors should be used based on …\nEnum representing different color modes for output\nDisable colored output (alias for No)\nDisable colored output\nEnable colored output\nFormat a GitHub check run status\nFormat a command or command example\nFormat a GitHub PR review status\nFormat a repository name\nFormat a repository path\nFormat a timestamp\nReturns the argument unchanged.\nHelper function to safely get an emoji or fallback to a …\nCalls <code>U::from(self)</code>.\nPrint an error message\nPrint a section header\nPrint an info message\nPrint a success message\nPrint a warning message\nGet plugin-specific config directory\nGet plugin-specific data directory\nRepresents a user-defined branch dependency\nRepresents a branch-issue association\nRepresents the registry of tracked repositories\nRepresents the repository-local state\nRepresents a repository in the registry\nRepresents a user-defined root branch\nRepresents a worktree in a repository\nAdd a repository to the registry\nAdd a branch-issue association\nAdd a user-defined branch dependency\nAdd a root branch\nAdd a worktree to the state\nCreate a new worktree\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a branch-issue association by Jira issue key\nGet a branch-issue association by branch name\nGet the default root branch\nGet all children of a branch (branches that depend on this …\nGet all parents of a branch (branches this branch depends …\nGet all root branch names\nGet a worktree by name\nCheck if there’s a dependency path from start to end\nCheck if there are any user-defined dependencies\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a branch is marked as a root\nList all repositories in the registry\nList all branch-issue associations\nList all dependencies\nList all root branches\nList all worktrees for a repository\nList all worktrees\nLoad the registry from disk\nLoad the repository state from disk\nCreate a new Repository instance\nRebuild all indices for fast lookups\nRemove a repository from the registry\nRemove all dependencies for a branch (both as child and …\nRemove a user-defined branch dependency\nRemove a root branch\nRemove a worktree from the state\nSave the registry to disk\nSave the repository state to disk\nSet a root branch as the default\nUpdate the last fetch time for a repository\nCheck if adding a dependency would create a cycle\nRepresents a branch node in the tree\nRenderer for the branch tree\nBuild cross-references for branches that appear in …\nCalculate the width of a branch and its children\nCalculate the maximum width of the tree structure …\nGet display width of a string, accounting for ANSI color …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize the renderer with proper tree width calculation\nPrint a branch with its metadata\nHelper method to render trees from root branches\nRender the tree starting from a given branch\nExtract the repository name from a path\nConvert a duration in seconds to a human-readable format\nGet the GitHub PR number associated with the current branch\nGet the Jira issue associated with the current branch\nCheck if a string is a valid branch name\nNormalize a path for consistent display\nResolve a repository path to its canonical form\nTruncate a string to a maximum length with ellipsis")