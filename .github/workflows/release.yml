name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # For creating releases
  actions: read    # For artifact downloads

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    steps:
      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Check version format
        run: |
          if [[ ! ${{ steps.version.outputs.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format. Expected: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi

  build-ubuntu:
    needs: validate-version
    name: Build Linux
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: rust-ubuntu-${{ hashFiles('**/Cargo.lock') }}
      - name: Build release
        run: cargo build --release --bin twig
      - name: Strip binary
        run: strip target/release/twig
      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Compress binary
        run: |
          tar -czf twig-linux-x86_64-v${{ steps.version.outputs.version }}.tar.gz -C target/release twig
          shasum -a 256 twig-linux-x86_64-v${{ steps.version.outputs.version }}.tar.gz > twig-linux-x86_64-v${{ steps.version.outputs.version }}.tar.gz.sha256
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: twig-linux
          path: |
            twig-linux-x86_64-v${{ steps.version.outputs.version }}.tar.gz
            twig-linux-x86_64-v${{ steps.version.outputs.version }}.tar.gz.sha256

  build-macos:
    needs: validate-version
    name: Build macOS
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: rust-macos-latest-${{ hashFiles('**/Cargo.lock') }}
      - name: Build release
        run: cargo build --release --bin twig
      - name: Strip binary
        run: strip target/release/twig
      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Compress binary
        run: |
          tar -czf twig-macos-x86_64-v${{ steps.version.outputs.version }}.tar.gz -C target/release twig
          shasum -a 256 twig-macos-x86_64-v${{ steps.version.outputs.version }}.tar.gz > twig-macos-x86_64-v${{ steps.version.outputs.version }}.tar.gz.sha256
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: twig-macos
          path: |
            twig-macos-x86_64-v${{ steps.version.outputs.version }}.tar.gz
            twig-macos-x86_64-v${{ steps.version.outputs.version }}.tar.gz.sha256

  build-windows:
    needs: validate-version
    name: Build Windows
    runs-on: windows-latest
    timeout-minutes: 15
    # Make this job non-blocking
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: rust-windows-latest-${{ hashFiles('**/Cargo.lock') }}
      - name: Build release
        run: cargo build --profile release-windows --bin twig
      - name: Extract version
        id: version
        shell: bash
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Create release directory
        shell: bash
        run: mkdir -p release

      - name: Copy binary
        shell: cmd
        run: copy target\release-windows\twig.exe release\

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: twig-windows
          path: release/twig.exe

      - name: Create zip for release
        shell: bash
        run: |
          7z a twig-windows-x86_64-v${{ steps.version.outputs.version }}.zip ./release/twig.exe
          # Generate checksum in the same format as Linux/macOS
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum twig-windows-x86_64-v${{ steps.version.outputs.version }}.zip > twig-windows-x86_64-v${{ steps.version.outputs.version }}.zip.sha256
          else
            # Fallback to shasum if sha256sum is not available
            shasum -a 256 twig-windows-x86_64-v${{ steps.version.outputs.version }}.zip > twig-windows-x86_64-v${{ steps.version.outputs.version }}.zip.sha256
          fi
          cat twig-windows-x86_64-v${{ steps.version.outputs.version }}.zip.sha256

      - name: Upload zip for release
        uses: actions/upload-artifact@v4
        with:
          name: twig-windows-zip
          path: |
            twig-windows-x86_64-v${{ steps.version.outputs.version }}.zip
            twig-windows-x86_64-v${{ steps.version.outputs.version }}.zip.sha256

  create-release:
    name: Create Release
    if: success()
    # Wait for build-windows even though it's optional
    needs: [validate-version, build-ubuntu, build-macos, build-windows]
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to get previous tags

      - name: Get version and previous tag
        id: version_info
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          echo "PREVIOUS_TAG=${PREVIOUS_TAG#v}" >>$GITHUB_ENV

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: twig-linux
          path: ./

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: twig-macos
          path: ./

      - name: Download Windows zip artifact (if available)
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: twig-windows-zip
          path: ./

      - name: Verify checksums
        run: |
          # Verify Linux checksums
          if [ -f "twig-linux-x86_64-v${VERSION}.tar.gz.sha256" ]; then
            sha256sum -c twig-linux-x86_64-v${VERSION}.tar.gz.sha256
          fi
          # Verify macOS checksums
          if [ -f "twig-macos-x86_64-v${VERSION}.tar.gz.sha256" ]; then
            sha256sum -c twig-macos-x86_64-v${VERSION}.tar.gz.sha256
          fi
          # Verify Windows checksums (if available)
          if [ -f "twig-windows-x86_64-v${VERSION}.zip.sha256" ]; then
            sha256sum -c twig-windows-x86_64-v${VERSION}.zip.sha256
          fi

      - name: Install envsubst
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      - name: Generate Release Notes
        run: |
          envsubst <.github/release-template.md >release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./twig-linux-x86_64-*.tar.gz
            ./twig-linux-x86_64-*.tar.gz.sha256
            ./twig-macos-x86_64-*.tar.gz
            ./twig-macos-x86_64-*.tar.gz.sha256
            ./twig-windows-x86_64-*.zip
            ./twig-windows-x86_64-*.zip.sha256
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: false
